{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct06-generics-solid-lauracahe/ejercicios/src/ejercicio-3.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct06-generics-solid-lauracahe/ejercicios/src/ejercicio-3.ts"],"names":[],"mappings":";;;AA+BA,MAAsB,yBAAyB;IAC7C;;;OAGG;IACH,YAAmB,UAAe;QAAf,eAAU,GAAV,UAAU,CAAK;IAAE,CAAC;IAErC;;;OAGG;IACH,GAAG,CAAC,QAAW;QACX,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;IAED;;OAEG;IACH,aAAa;QACT,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;CAQF;AA5BD,8DA4BC;AAaD;;EAEE;AACF,MAAa,MAAO,SAAQ,yBAAgC;IAC1D;;OAEG;IACH,YAAY,UAAmB;QAC3B,KAAK,CAAC,UAAU,CAAC,CAAC;IACtB,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,SAAiB,EAAE,IAAY;QACpC,IAAI,MAAM,GAAY,EAAE,CAAC;QAEzB,QAAO,IAAI,EAAC;YACV,KAAK,MAAM;gBACT,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAC9B,IAAI,KAAK,CAAC,IAAI,KAAK,SAAS,EAAE;wBAC5B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACpB;gBACH,CAAC,CAAC,CAAC;gBACL,MAAM;YAEN,KAAK,OAAO;gBACV,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAC9B,IAAI,KAAK,CAAC,KAAK,KAAK,SAAS,EAAE;wBAC7B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACpB;gBACH,CAAC,CAAC,CAAC;gBACL,MAAM;YAEN,KAAK,MAAM;gBACT,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAC9B,IAAI,KAAK,CAAC,IAAI,KAAK,SAAS,EAAE;wBAC5B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACpB;gBACH,CAAC,CAAC,CAAC;gBACL,MAAM;YAEN,KAAK,SAAS;gBACZ,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAC9B,IAAI,KAAK,CAAC,OAAO,KAAK,SAAS,EAAE;wBAC/B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACpB;gBACH,CAAC,CAAC,CAAC;gBACL,MAAM;YAEN,KAAK,UAAU;gBACb,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAC9B,IAAI,KAAK,CAAC,QAAQ,KAAK,SAAS,EAAE;wBAChC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACpB;gBACH,CAAC,CAAC,CAAC;gBACL,MAAM;YAEN;gBACE,MAAM;SACT;QACD,OAAO,MAAM,CAAC;IACf,CAAC;CACH;AA9DD,wBA8DC;AAaD;;EAEE;AACF,MAAa,MAAO,SAAQ,yBAAgC;IAC1D;;OAEG;IACH,YAAY,UAAmB;QAC3B,KAAK,CAAC,UAAU,CAAC,CAAC;IACtB,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,SAAiB,EAAE,IAAY;QACpC,IAAI,MAAM,GAAY,EAAE,CAAC;QAEzB,QAAQ,IAAI,EAAC;YACX,KAAK,MAAM;gBACT,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAC9B,IAAI,KAAK,CAAC,IAAI,IAAI,SAAS,EAAE;wBAC3B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACpB;gBACH,CAAC,CAAC,CAAC;gBACL,MAAM;YAEN,KAAK,OAAO;gBACV,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAC9B,IAAI,KAAK,CAAC,KAAK,IAAI,SAAS,EAAE;wBAC5B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACpB;gBACH,CAAC,CAAC,CAAC;gBACL,MAAM;YAEN,KAAK,MAAM;gBACT,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAC9B,IAAI,KAAK,CAAC,IAAI,IAAI,SAAS,EAAE;wBAC3B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACpB;gBACH,CAAC,CAAC,CAAC;gBACL,MAAM;YAEN,KAAK,UAAU;gBACb,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAC9B,IAAI,KAAK,CAAC,QAAQ,IAAI,SAAS,EAAE;wBAC/B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACpB;gBACH,CAAC,CAAC,CAAC;gBACL,MAAM;YAEN,KAAK,UAAU;gBACb,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAC9B,IAAI,KAAK,CAAC,QAAQ,IAAI,SAAS,EAAE;wBAC/B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACpB;gBACH,CAAC,CAAC,CAAC;gBACL,MAAM;YAEN;gBACE,MAAM;SACP;QACD,OAAO,MAAM,CAAC;IACjB,CAAC;CACH;AA9DD,wBA8DC;AAYD;;EAEE;AACF,MAAa,aAAc,SAAQ,yBAAsC;IACvE;;OAEG;IACH,YAAY,UAAyB;QACjC,KAAK,CAAC,UAAU,CAAC,CAAC;IACtB,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,SAAiB,EAAE,IAAY;QACpC,IAAI,MAAM,GAAkB,EAAE,CAAC;QAE/B,QAAQ,IAAI,EAAC;YACX,KAAK,MAAM;gBACT,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAC9B,IAAI,KAAK,CAAC,IAAI,IAAI,SAAS,EAAE;wBAC3B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACpB;gBACH,CAAC,CAAC,CAAC;gBACL,MAAM;YAEN,KAAK,OAAO;gBACV,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAC9B,IAAI,KAAK,CAAC,KAAK,IAAI,SAAS,EAAE;wBAC5B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACpB;gBACH,CAAC,CAAC,CAAC;gBACL,MAAM;YAEN,KAAK,MAAM;gBACT,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAC9B,IAAI,KAAK,CAAC,IAAI,IAAI,SAAS,EAAE;wBAC3B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACpB;gBACH,CAAC,CAAC,CAAC;gBACL,MAAM;YAEN,KAAK,UAAU;gBACb,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAC9B,IAAI,KAAK,CAAC,QAAQ,IAAI,SAAS,EAAE;wBAC/B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACpB;gBACH,CAAC,CAAC,CAAC;gBACL,MAAM;YAEN;gBACE,MAAM;SACT;QAED,OAAO,MAAM,CAAC;IACf,CAAC;CACH;AAvDD,sCAuDC;AAED,MAAM,MAAM,GAAY,EAAE,CAAC;AAC3B,IAAI,MAAa,CAAC;AAClB,IAAI,MAAa,CAAC;AAElB,MAAM,GAAG,EAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC;AACrF,MAAM,GAAG,EAAC,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAC,CAAC;AAErF,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACpB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAEpB,MAAM,iBAAiB,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC;AAE7C,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;AAChD,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;AAEtD,MAAM,MAAM,GAAY,EAAE,CAAC;AAC3B,IAAI,MAAa,CAAC;AAClB,IAAI,MAAa,CAAC;AAElB,MAAM,GAAG,EAAC,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,KAAK,EAAC,CAAC;AACvG,MAAM,GAAG,EAAC,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,KAAK,EAAC,CAAC;AAEtG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACpB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAEpB,MAAM,iBAAiB,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC;AAE7C,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;AAChD,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;AAEzD,MAAM,aAAa,GAAkB,EAAE,CAAC;AACxC,IAAI,YAAyB,CAAC;AAC9B,IAAI,YAAyB,CAAC;AAE9B,YAAY,GAAG,EAAC,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAC,CAAC;AACvF,YAAY,GAAG,EAAC,IAAI,EAAE,2BAA2B,EAAE,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAC,CAAC;AAEvG,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AACjC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAEjC,MAAM,uBAAuB,GAAG,IAAI,aAAa,CAAC,aAAa,CAAC,CAAC;AAEjE,OAAO,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC;AAC1D,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @brief Interface for a emission collection\n */\nexport interface Streamable<T> {\n  collection: T[]\n\n  /**\n   * @brief Add a new emission to the collection\n   * @param emission emission to add\n   */\n  add(emission: T): void;\n\n  /**\n   * @return Returns the collection of emissions\n   */\n  getCollection(): T[];\n}\n\n\n/**\n * @brief search interface\n */\nexport interface Search<T> {\n   /**\n   * @brief Finds the elements that have the specified attribute in the collection\n   * @param attribute attribute to find\n   * @param type type of attribute\n   */\n  search(attribute: string, type: string): T[]\n}\n\nexport abstract class BasicStreamableCollection<T> implements Streamable<T>, Search<T>{\n  /**\n   * \n   * @param collection Create a collection to search or add an emission\n   */\n  constructor(public collection: T[]){}\n\n  /**\n   * @brief Add a new emission to the collection\n   * @param emission emission to add\n   */\n  add(emission: T){\n      this.collection.push(emission);\n  }\n\n  /**\n   * @return Returns the collection of emissions\n   */\n  getCollection(){\n      return this.collection;\n  }\n\n  /**\n   * @brief Finds the elements that have the specified attribute in the collection\n   * @param attribute attribute to find\n   * @param type type of attribute\n   */\n  abstract search(attribute: string, type: string): T[]\n}\n\n/**\n * @brief Specifies the attributes that every series must have\n */\nexport type Serie = {\n  name: string,\n  genre: string,\n  year: string,\n  seasons: string,\n  episodes: string\n}\n\n/**\n* @brief Stores the series collection and allows searching within the collection\n*/\nexport class Series extends BasicStreamableCollection<Serie>{\n  /**\n   * @param collection series collection (use BasicStreamableCollection template)\n   */\n  constructor(collection: Serie[]){\n      super(collection);\n  }\n\n  /**\n   * @brief Finds the elements that have the specified attribute in the collection\n   * @param attribute attribute to find\n   * @param type type of attribute\n   */\n  search(attribute :string, type :string){\n    let result: Serie[] = [];\n      \n    switch(type){\n      case \"name\":\n        this.collection.forEach(value => {\n          if (value.name === attribute) {\n            result.push(value);\n          }\n        });\n      break;\n\n      case \"genre\":\n        this.collection.forEach(value => {\n          if (value.genre === attribute) {\n            result.push(value);\n          }\n        });\n      break;\n\n      case \"year\":\n        this.collection.forEach(value => {\n          if (value.year === attribute) {\n            result.push(value);\n          }\n        });\n      break;\n\n      case \"seasons\":\n        this.collection.forEach(value => {\n          if (value.seasons === attribute) {\n            result.push(value);\n          }\n        });\n      break;\n\n      case \"episodes\":\n        this.collection.forEach(value => {\n          if (value.episodes === attribute) {\n            result.push(value);\n          }\n        });\n      break;\n\n      default:\n        break;\n    }\n    return result;\n   }\n}\n\n/**\n * @brief Specify the attributes that a movie should have\n */\nexport type Movie = {\n  name: string,\n  genre: string,\n  year: string,\n  director :string,\n  duration: string\n}\n\n/**\n* @brief Stores the collection of movies and allows you to search within the collection\n*/\nexport class Movies extends BasicStreamableCollection<Movie>{\n  /**\n   * @param collection movie collection (use BasicStreamableCollection template)\n   */\n  constructor(collection: Movie[]){\n      super(collection);\n  }\n\n  /**\n   * @brief Finds the elements that have the specified attribute in the collection\n   * @param attribute attribute to find\n   * @param type type of attribute\n   */\n  search(attribute: string, type: string){\n    let result: Movie[] = [];\n      \n    switch (type){\n      case \"name\":\n        this.collection.forEach(value => {\n          if (value.name == attribute) {\n            result.push(value);\n          }\n        });\n      break;\n\n      case \"genre\":\n        this.collection.forEach(value => {\n          if (value.genre == attribute) {\n            result.push(value);\n          }\n        });\n      break;\n\n      case \"year\":\n        this.collection.forEach(value => {\n          if (value.year == attribute) {\n            result.push(value);\n          }\n        });\n      break;\n\n      case \"director\":\n        this.collection.forEach(value => {\n          if (value.director == attribute) {\n            result.push(value);\n          }\n        });\n      break;\n\n      case \"duration\":\n        this.collection.forEach(value => {\n          if (value.duration == attribute) {\n            result.push(value);\n          }\n        });\n      break;\n\n      default:\n        break;\n      }\n      return result;\n   }\n}\n\n/**\n * @brief Specify the attributes that a documentary should have\n */\nexport type Documentary = {\n  name: string,\n  genre: string,\n  year: string,\n  duration: string\n}\n\n/**\n* @brief Stores the collection of documentaries and allows searching within the collection\n*/\nexport class Documentaries extends BasicStreamableCollection<Documentary>{\n  /**\n   * @param collection Documentary collection (use BasicStreamableCollection template)\n   */\n  constructor(collection: Documentary[]){\n      super(collection);\n  }\n\n  /**\n   * @brief Finds the elements that have the specified attribute in the collection\n   * @param attribute attribute to find\n   * @param type type of attribute\n   */\n  search(attribute: string, type: string){\n    let result: Documentary[] = [];\n      \n    switch (type){\n      case \"name\":\n        this.collection.forEach(value => {\n          if (value.name == attribute) {\n            result.push(value);\n          }\n        });\n      break;\n\n      case \"genre\":\n        this.collection.forEach(value => {\n          if (value.genre == attribute) {\n            result.push(value);\n          }\n        });\n      break;\n\n      case \"year\":\n        this.collection.forEach(value => {\n          if (value.year == attribute) {\n            result.push(value);\n          }\n        });\n      break;\n\n      case \"duration\":\n        this.collection.forEach(value => {\n          if (value.duration == attribute) {\n            result.push(value);\n          }\n        });\n      break;\n\n      default:\n        break;\n    }\n\n    return result;\n   }\n}\n\nconst series: Serie[] = [];\nlet serie1: Serie;\nlet serie2: Serie;\n\nserie1 = {name: 'LCDP', genre: 'Action', year: '2017', seasons: '5', episodes: '40'};\nserie2 = {name: 'Lupin', genre: 'Action', year: '2021', seasons: '1', episodes: '8'};\n\nseries.push(serie1);\nseries.push(serie2);\n\nconst collectionOfSerie = new Series(series);\n\nconsole.log('Búsqueda de series del año 2017:');\nconsole.log(collectionOfSerie.search('2017', 'year'));\n\nconst movies: Movie[] = [];\nlet movie1: Movie;\nlet movie2: Movie;\n\nmovie1 = {name: 'Bajo cero', genre: 'Action', year: '2020', director: 'Lluis Quilez', duration: '140'};\nmovie2 = {name: 'Venganza', genre: 'Action', year: '2017', director: 'Pierre Morel', duration: '190'};\n\nmovies.push(movie1);\nmovies.push(movie2);\n\nconst collectionOfMovie = new Movies(movies);\n\nconsole.log('Búsqueda de películas de acción:');\nconsole.log(collectionOfSerie.search('Action', 'genre'));\n\nconst documentaries: Documentary[] = [];\nlet documentary1: Documentary;\nlet documentary2: Documentary;\n\ndocumentary1 = {name: 'Crip Camp', genre: 'Documental', year: '2020', duration: '150'};\ndocumentary2 = {name: 'El escuadrón de la muerte', genre: 'Documental', year: '2017', duration: '190'};\n\ndocumentaries.push(documentary1);\ndocumentaries.push(documentary2);\n\nconst collectionOfDocumentary = new Documentaries(documentaries);\n\nconsole.log('Búsqueda de documentales de duración 140: ');\nconsole.log(collectionOfSerie.search('140', 'duration'));"]}