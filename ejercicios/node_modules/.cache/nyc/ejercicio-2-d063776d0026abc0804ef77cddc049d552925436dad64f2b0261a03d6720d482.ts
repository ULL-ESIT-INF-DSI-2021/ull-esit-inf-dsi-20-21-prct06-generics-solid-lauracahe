"use strict";function cov_10uclhs89x(){var path="/home/usuario/ull-esit-inf-dsi-20-21-prct06-generics-solid-lauracahe/ejercicios/src/ejercicio-2.ts";var hash="ab1bde990f74a4bc3f7d58325213c24952d8f363";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/usuario/ull-esit-inf-dsi-20-21-prct06-generics-solid-lauracahe/ejercicios/src/ejercicio-2.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:109}},"2":{start:{line:4,column:26},end:{line:4,column:66}},"3":{start:{line:15,column:8},end:{line:15,column:31}},"4":{start:{line:16,column:8},end:{line:16,column:39}},"5":{start:{line:23,column:8},end:{line:23,column:163}},"6":{start:{line:26,column:0},end:{line:26,column:22}},"7":{start:{line:27,column:25},end:{line:27,column:61}},"8":{start:{line:33,column:8},end:{line:33,column:31}},"9":{start:{line:34,column:8},end:{line:34,column:39}},"10":{start:{line:37,column:8},end:{line:37,column:159}},"11":{start:{line:40,column:0},end:{line:40,column:20}},"12":{start:{line:41,column:27},end:{line:41,column:63}},"13":{start:{line:47,column:8},end:{line:47,column:31}},"14":{start:{line:48,column:8},end:{line:48,column:39}},"15":{start:{line:51,column:8},end:{line:51,column:167}},"16":{start:{line:54,column:0},end:{line:54,column:24}},"17":{start:{line:55,column:25},end:{line:55,column:57}},"18":{start:{line:61,column:8},end:{line:61,column:31}},"19":{start:{line:62,column:8},end:{line:62,column:39}},"20":{start:{line:65,column:8},end:{line:65,column:159}},"21":{start:{line:68,column:0},end:{line:68,column:20}},"22":{start:{line:69,column:32},end:{line:69,column:68}},"23":{start:{line:75,column:8},end:{line:75,column:31}},"24":{start:{line:76,column:8},end:{line:76,column:39}},"25":{start:{line:79,column:8},end:{line:79,column:187}},"26":{start:{line:82,column:0},end:{line:82,column:34}},"27":{start:{line:83,column:27},end:{line:83,column:64}},"28":{start:{line:89,column:8},end:{line:89,column:31}},"29":{start:{line:90,column:8},end:{line:90,column:39}},"30":{start:{line:93,column:8},end:{line:93,column:175}},"31":{start:{line:96,column:0},end:{line:96,column:24}},"32":{start:{line:107,column:11},end:{line:107,column:29}},"33":{start:{line:108,column:0},end:{line:108,column:35}},"34":{start:{line:109,column:13},end:{line:109,column:34}},"35":{start:{line:110,column:0},end:{line:110,column:36}},"36":{start:{line:111,column:12},end:{line:111,column:33}},"37":{start:{line:112,column:0},end:{line:112,column:37}},"38":{start:{line:113,column:13},end:{line:113,column:34}},"39":{start:{line:114,column:0},end:{line:114,column:37}},"40":{start:{line:115,column:11},end:{line:115,column:29}},"41":{start:{line:116,column:0},end:{line:116,column:34}},"42":{start:{line:117,column:18},end:{line:117,column:43}},"43":{start:{line:118,column:0},end:{line:118,column:41}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:14,column:4},end:{line:14,column:5}},loc:{start:{line:14,column:38},end:{line:17,column:5}},line:14},"1":{name:"(anonymous_1)",decl:{start:{line:22,column:4},end:{line:22,column:5}},loc:{start:{line:22,column:26},end:{line:24,column:5}},line:22},"2":{name:"(anonymous_2)",decl:{start:{line:32,column:4},end:{line:32,column:5}},loc:{start:{line:32,column:38},end:{line:35,column:5}},line:32},"3":{name:"(anonymous_3)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:26},end:{line:38,column:5}},line:36},"4":{name:"(anonymous_4)",decl:{start:{line:46,column:4},end:{line:46,column:5}},loc:{start:{line:46,column:38},end:{line:49,column:5}},line:46},"5":{name:"(anonymous_5)",decl:{start:{line:50,column:4},end:{line:50,column:5}},loc:{start:{line:50,column:26},end:{line:52,column:5}},line:50},"6":{name:"(anonymous_6)",decl:{start:{line:60,column:4},end:{line:60,column:5}},loc:{start:{line:60,column:38},end:{line:63,column:5}},line:60},"7":{name:"(anonymous_7)",decl:{start:{line:64,column:4},end:{line:64,column:5}},loc:{start:{line:64,column:26},end:{line:66,column:5}},line:64},"8":{name:"(anonymous_8)",decl:{start:{line:74,column:4},end:{line:74,column:5}},loc:{start:{line:74,column:38},end:{line:77,column:5}},line:74},"9":{name:"(anonymous_9)",decl:{start:{line:78,column:4},end:{line:78,column:5}},loc:{start:{line:78,column:26},end:{line:80,column:5}},line:78},"10":{name:"(anonymous_10)",decl:{start:{line:88,column:4},end:{line:88,column:5}},loc:{start:{line:88,column:38},end:{line:91,column:5}},line:88},"11":{name:"(anonymous_11)",decl:{start:{line:92,column:4},end:{line:92,column:5}},loc:{start:{line:92,column:26},end:{line:94,column:5}},line:92}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},b:{},inputSourceMap:{version:3,file:"/home/usuario/ull-esit-inf-dsi-20-21-prct06-generics-solid-lauracahe/ejercicios/src/ejercicio-2.ts",sources:["/home/usuario/ull-esit-inf-dsi-20-21-prct06-generics-solid-lauracahe/ejercicios/src/ejercicio-2.ts"],names:[],mappings:";;;AASA,MAAM,iBAAiB,GAAyB,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;AAEzF;;GAEG;AACH,MAAa,KAAK;IAChB;;;;OAIG;IACH,YAA4B,OAAe,EAAkB,WAAmB;QAApD,YAAO,GAAP,OAAO,CAAQ;QAAkB,gBAAW,GAAX,WAAW,CAAQ;IAAG,CAAC;IAEpF;;;OAGG;IACH,UAAU,CAAC,SAAiB;QAC1B,OAAO,IAAI,CAAC,OAAO,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IAC7J,CAAC;CACF;AAfD,sBAeC;AAED,MAAM,gBAAgB,GAAyB,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;AAEpF;;GAEG;AACH,MAAa,IAAI;IACf,YAAmB,OAAe,EAAS,WAAmB;QAA3C,YAAO,GAAP,OAAO,CAAQ;QAAS,gBAAW,GAAX,WAAW,CAAQ;IAAG,CAAC;IAElE,UAAU,CAAC,SAAiB;QAC1B,OAAO,IAAI,CAAC,OAAO,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACzJ,CAAC;CACF;AAND,oBAMC;AAED,MAAM,kBAAkB,GAAyB,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;AAEtF;;GAEG;AACH,MAAa,MAAM;IACjB,YAAmB,OAAe,EAAS,WAAmB;QAA3C,YAAO,GAAP,OAAO,CAAQ;QAAS,gBAAW,GAAX,WAAW,CAAQ;IAAG,CAAC;IAElE,UAAU,CAAC,SAAiB;QAC1B,OAAO,IAAI,CAAC,OAAO,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACjK,CAAC;CACF;AAND,wBAMC;AAED,MAAM,gBAAgB,GAAyB,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AAEhF;;GAEG;AACH,MAAa,IAAI;IACf,YAAmB,OAAe,EAAS,WAAmB;QAA3C,YAAO,GAAP,OAAO,CAAQ;QAAS,gBAAW,GAAX,WAAW,CAAQ;IAAG,CAAC;IAElE,UAAU,CAAC,SAAiB;QAC1B,OAAO,IAAI,CAAC,OAAO,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACzJ,CAAC;CACF;AAND,oBAMC;AAED,MAAM,uBAAuB,GAAyB,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;AAE3F;;GAEG;AACH,MAAa,WAAW;IACtB,YAAmB,OAAe,EAAS,WAAmB;QAA3C,YAAO,GAAP,OAAO,CAAQ;QAAS,gBAAW,GAAX,WAAW,CAAQ;IAAG,CAAC;IAElE,UAAU,CAAC,SAAiB;QAC1B,OAAO,IAAI,CAAC,OAAO,GAAG,uBAAuB,CAAC,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,GAAG,uBAAuB,CAAC,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACrL,CAAC;CACF;AAND,kCAMC;AAED,MAAM,kBAAkB,GAAyB,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;AAEvF;;GAEG;AACH,MAAa,MAAM;IACjB,YAAmB,OAAe,EAAS,WAAmB;QAA3C,YAAO,GAAP,OAAO,CAAQ;QAAS,gBAAW,GAAX,WAAW,CAAQ;IAAG,CAAC;IAElE,UAAU,CAAC,SAAiB;QAC1B,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IACzK,CAAC;CACF;AAND,wBAMC;AAED,0EAA0E;AAE1E,MAAM;AACN,kEAAkE;AAClE,MAAM;AACN,2DAA2D;AAC3D,uEAAuE;AAEvE,4CAA4C;AAC5C,8KAA8K;AAC9K,MAAM;AACN,IAAI;AAEJ,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAC9B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;AAEnC,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AACnC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;AAEpC,IAAI,KAAK,GAAG,IAAI,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AAClC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;AAErC,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AACnC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;AAErC,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAC9B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;AAElC,IAAI,WAAW,GAAG,IAAI,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAC5C,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC",sourcesContent:["/**\n * @brief Interface that allows conversions between systems for each magnitude\n */\nexport interface isConvertible<T> {\n  initial: T; //Cantidad de origen\n  initialUnit: string; //Unidad inicial\n  unitChange(finalUnit: string): T; \n}\n\nconst measurementsSpeed: [string[], number[]] = [['mps', 'mph', 'kph'], [0.28, 0.62, 1]];\n\n/**\n * @brief Speed class that convert differents unit systems. \n */\nexport class Speed implements isConvertible<number> {\n  /**\n   * \n   * @param initial initial amount\n   * @param initialUnit initial unit\n   */\n  constructor(public readonly initial: number, public readonly initialUnit: string) {}\n\n  /**\n   * \n   * @param finalUnit final unit\n   */\n  unitChange(finalUnit: string): number {\n    return this.initial * measurementsSpeed[1][measurementsSpeed[0].indexOf(finalUnit)] / measurementsSpeed[1][measurementsSpeed[0].indexOf(this.initialUnit)];\n  }\n}\n\nconst measurementsMass: [string[], number[]] = [['st', 'g', 'kg'], [0.16, 1000, 1]];\n\n/**\n * @brief Mass class that convert differents unit systems. \n */\nexport class Mass implements isConvertible<number> {\n  constructor(public initial: number, public initialUnit: string) {}\n\n  unitChange(finalUnit: string): number {\n    return this.initial * measurementsMass[1][measurementsMass[0].indexOf(finalUnit)] / measurementsMass[1][measurementsMass[0].indexOf(this.initialUnit)];\n  }\n}\n\nconst measurementsLenght: [string[], number[]] = [['km', 'cm', 'm'], [0.001, 100, 1]];\n\n/**\n * @brief Lenght class that convert differents unit systems. \n */\nexport class Length implements isConvertible<number> {\n  constructor(public initial: number, public initialUnit: string) {}\n\n  unitChange(finalUnit: string): number {\n    return this.initial * measurementsLenght[1][measurementsLenght[0].indexOf(finalUnit)] / measurementsLenght[1][measurementsLenght[0].indexOf(this.initialUnit)];\n  }\n}\n\nconst measurementsTime: [string[], number[]] = [['s', 'm', 'h'], [3600, 60, 1]];\n\n/**\n * @brief Time class that convert differents unit systems. \n */\nexport class Time implements isConvertible<number> {\n  constructor(public initial: number, public initialUnit: string) {}\n\n  unitChange(finalUnit: string): number {\n    return this.initial * measurementsTime[1][measurementsTime[0].indexOf(finalUnit)] / measurementsTime[1][measurementsTime[0].indexOf(this.initialUnit)];\n  }\n}\n\nconst measurementsTemperature: [string[], number[]] = [['k', 'f', 'c'], [274.15, 33.8, 1]];\n\n/**\n * @brief Temperature class that convert differents unit systems. \n */\nexport class Temperature implements isConvertible<number> {\n  constructor(public initial: number, public initialUnit: string) {}\n\n  unitChange(finalUnit: string): number {\n    return this.initial * measurementsTemperature[1][measurementsTemperature[0].indexOf(finalUnit)] / measurementsTemperature[1][measurementsTemperature[0].indexOf(this.initialUnit)];\n  }\n}\n\nconst measurementsVolume: [string[], number[]] = [['m3', 'ml', 'l'], [0.001, 1000, 1]];\n\n/**\n * @brief Volume class that convert differents unit systems. \n */\nexport class Volume implements isConvertible<number> {\n  constructor(public initial: number, public initialUnit: string) {}\n\n  unitChange(finalUnit: string): number {\n    return Number(this.initial * measurementsVolume[1][measurementsVolume[0].indexOf(finalUnit)] / measurementsVolume[1][measurementsVolume[0].indexOf(this.initialUnit)]);\n  }\n}\n\n// const measurementsStrength: [string[], number[]] = [['kp'], [9.80665]];\n\n// /**\n//  * @brief Strength class that convert differents unit systems. \n//  */\n// export class Strength implements isConvertible<number> {\n//   constructor(public initial: number, public initialUnit: string) {}\n\n//   unitChange(finalUnit: string): number {\n//     return this.initial * measurementsStrength[1][measurementsStrength[0].indexOf(finalUnit)] / measurementsStrength[1][measurementsStrength[0].indexOf(this.initialUnit)];\n//   }\n// }\n\nlet mass = new Mass(6.8, 'g');\nconsole.log(mass.unitChange('kg'));\n\nlet volume = new Volume(6.8, 'm3');\nconsole.log(volume.unitChange('l'));\n\nlet speed = new Speed(6.8, 'mps');\nconsole.log(speed.unitChange('kph'));\n\nlet length = new Length(6.8, 'cm');\nconsole.log(length.unitChange('km'));\n\nlet time = new Time(6.8, 'm');\nconsole.log(time.unitChange('s'));\n\nlet temperature = new Temperature(6.8, 'k');\nconsole.log(temperature.unitChange('c'));"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ab1bde990f74a4bc3f7d58325213c24952d8f363"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_10uclhs89x=function(){return actualCoverage;};}return actualCoverage;}cov_10uclhs89x();cov_10uclhs89x().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_10uclhs89x().s[1]++;exports.Volume=exports.Temperature=exports.Time=exports.Length=exports.Mass=exports.Speed=void 0;const measurementsSpeed=(cov_10uclhs89x().s[2]++,[['mps','mph','kph'],[0.28,0.62,1]]);/**
 * @brief Speed class that convert differents unit systems.
 */class Speed{/**
     *
     * @param initial initial amount
     * @param initialUnit initial unit
     */constructor(initial,initialUnit){cov_10uclhs89x().f[0]++;cov_10uclhs89x().s[3]++;this.initial=initial;cov_10uclhs89x().s[4]++;this.initialUnit=initialUnit;}/**
     *
     * @param finalUnit final unit
     */unitChange(finalUnit){cov_10uclhs89x().f[1]++;cov_10uclhs89x().s[5]++;return this.initial*measurementsSpeed[1][measurementsSpeed[0].indexOf(finalUnit)]/measurementsSpeed[1][measurementsSpeed[0].indexOf(this.initialUnit)];}}cov_10uclhs89x().s[6]++;exports.Speed=Speed;const measurementsMass=(cov_10uclhs89x().s[7]++,[['st','g','kg'],[0.16,1000,1]]);/**
 * @brief Mass class that convert differents unit systems.
 */class Mass{constructor(initial,initialUnit){cov_10uclhs89x().f[2]++;cov_10uclhs89x().s[8]++;this.initial=initial;cov_10uclhs89x().s[9]++;this.initialUnit=initialUnit;}unitChange(finalUnit){cov_10uclhs89x().f[3]++;cov_10uclhs89x().s[10]++;return this.initial*measurementsMass[1][measurementsMass[0].indexOf(finalUnit)]/measurementsMass[1][measurementsMass[0].indexOf(this.initialUnit)];}}cov_10uclhs89x().s[11]++;exports.Mass=Mass;const measurementsLenght=(cov_10uclhs89x().s[12]++,[['km','cm','m'],[0.001,100,1]]);/**
 * @brief Lenght class that convert differents unit systems.
 */class Length{constructor(initial,initialUnit){cov_10uclhs89x().f[4]++;cov_10uclhs89x().s[13]++;this.initial=initial;cov_10uclhs89x().s[14]++;this.initialUnit=initialUnit;}unitChange(finalUnit){cov_10uclhs89x().f[5]++;cov_10uclhs89x().s[15]++;return this.initial*measurementsLenght[1][measurementsLenght[0].indexOf(finalUnit)]/measurementsLenght[1][measurementsLenght[0].indexOf(this.initialUnit)];}}cov_10uclhs89x().s[16]++;exports.Length=Length;const measurementsTime=(cov_10uclhs89x().s[17]++,[['s','m','h'],[3600,60,1]]);/**
 * @brief Time class that convert differents unit systems.
 */class Time{constructor(initial,initialUnit){cov_10uclhs89x().f[6]++;cov_10uclhs89x().s[18]++;this.initial=initial;cov_10uclhs89x().s[19]++;this.initialUnit=initialUnit;}unitChange(finalUnit){cov_10uclhs89x().f[7]++;cov_10uclhs89x().s[20]++;return this.initial*measurementsTime[1][measurementsTime[0].indexOf(finalUnit)]/measurementsTime[1][measurementsTime[0].indexOf(this.initialUnit)];}}cov_10uclhs89x().s[21]++;exports.Time=Time;const measurementsTemperature=(cov_10uclhs89x().s[22]++,[['k','f','c'],[274.15,33.8,1]]);/**
 * @brief Temperature class that convert differents unit systems.
 */class Temperature{constructor(initial,initialUnit){cov_10uclhs89x().f[8]++;cov_10uclhs89x().s[23]++;this.initial=initial;cov_10uclhs89x().s[24]++;this.initialUnit=initialUnit;}unitChange(finalUnit){cov_10uclhs89x().f[9]++;cov_10uclhs89x().s[25]++;return this.initial*measurementsTemperature[1][measurementsTemperature[0].indexOf(finalUnit)]/measurementsTemperature[1][measurementsTemperature[0].indexOf(this.initialUnit)];}}cov_10uclhs89x().s[26]++;exports.Temperature=Temperature;const measurementsVolume=(cov_10uclhs89x().s[27]++,[['m3','ml','l'],[0.001,1000,1]]);/**
 * @brief Volume class that convert differents unit systems.
 */class Volume{constructor(initial,initialUnit){cov_10uclhs89x().f[10]++;cov_10uclhs89x().s[28]++;this.initial=initial;cov_10uclhs89x().s[29]++;this.initialUnit=initialUnit;}unitChange(finalUnit){cov_10uclhs89x().f[11]++;cov_10uclhs89x().s[30]++;return Number(this.initial*measurementsVolume[1][measurementsVolume[0].indexOf(finalUnit)]/measurementsVolume[1][measurementsVolume[0].indexOf(this.initialUnit)]);}}cov_10uclhs89x().s[31]++;exports.Volume=Volume;// const measurementsStrength: [string[], number[]] = [['kp'], [9.80665]];
// /**
//  * @brief Strength class that convert differents unit systems. 
//  */
// export class Strength implements isConvertible<number> {
//   constructor(public initial: number, public initialUnit: string) {}
//   unitChange(finalUnit: string): number {
//     return this.initial * measurementsStrength[1][measurementsStrength[0].indexOf(finalUnit)] / measurementsStrength[1][measurementsStrength[0].indexOf(this.initialUnit)];
//   }
// }
let mass=(cov_10uclhs89x().s[32]++,new Mass(6.8,'g'));cov_10uclhs89x().s[33]++;console.log(mass.unitChange('kg'));let volume=(cov_10uclhs89x().s[34]++,new Volume(6.8,'m3'));cov_10uclhs89x().s[35]++;console.log(volume.unitChange('l'));let speed=(cov_10uclhs89x().s[36]++,new Speed(6.8,'mps'));cov_10uclhs89x().s[37]++;console.log(speed.unitChange('kph'));let length=(cov_10uclhs89x().s[38]++,new Length(6.8,'cm'));cov_10uclhs89x().s[39]++;console.log(length.unitChange('km'));let time=(cov_10uclhs89x().s[40]++,new Time(6.8,'m'));cov_10uclhs89x().s[41]++;console.log(time.unitChange('s'));let temperature=(cov_10uclhs89x().s[42]++,new Temperature(6.8,'k'));cov_10uclhs89x().s[43]++;console.log(temperature.unitChange('c'));//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,